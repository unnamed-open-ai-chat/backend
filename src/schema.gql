# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

enum AIProviderId {
  anthropic
  google
}

input AddMessageDto {
  apiKeyId: String!
  branchId: String!
  modelId: String!
  prompt: String!
  rawDecryptKey: String!
}

type ApiKey {
  _id: String!
  alias: String!
  lastRotated: DateTime
  lastUsed: DateTime
  lastValidated: DateTime
  provider: String!
}

input ChangePasswordDTO {
  newPassword: String!
  oldPassword: String!
}

type Chat {
  _id: String!
  archived: Boolean!
  defaultBranch: ChatBranch
  isPublic: Boolean!
  lastActivityAt: DateTime!
  pinned: Boolean!
  title: String!
}

type ChatBranch {
  _id: String!
  branchPoint: Float!
  isActive: Boolean!
  messageCount: Float!
  name: String!
  parentBranchId: ChatBranch
}

type ChatsResponse {
  chats: [Chat!]!
  hasMore: Boolean!
  total: Float!
}

input CreateApiKeyDto {
  alias: String!
  apiKey: String!
  provider: AIProviderId!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DeviceInfo {
  browser: String
  ip: String!
  platform: String
  userAgent: String!
}

input GetChatDto {
  chatId: String!
}

input GetManyChatsDto {
  archived: Boolean = false
  limit: Float = 20
  offset: Float = 0
  search: String
}

input GetMessagesDto {
  branchId: String!
  fromIndex: Float = 0
  limit: Float = 50
  offset: Float = 0
}

input LoginDTO {
  email: String!
  password: String!
}

type Message {
  _id: String!
  attachments: [String!]!
  branchId: String!
  content: [MessageContent!]!
  editedAt: DateTime
  index: Float!
  isEdited: Boolean!
  modelUsed: String
  originalContent: [MessageContent!]
  role: String!
  tokens: Float
}

type MessageContent {
  id: String
  name: String
  text: String
  tool_use_id: String
  type: String!
}

type MessagesResponse {
  hasMore: Boolean!
  messages: [Message!]!
  total: Float!
}

type Mutation {
  addApiKey(payload: CreateApiKeyDto!): ApiKey!
  createChat: Chat!
  deleteApiKey(id: String!): Boolean!
  login(payload: LoginDTO!): SessionResponse!
  logout: Boolean!
  refreshToken(refreshToken: String!): SessionResponse!
  register(payload: RegisterDto!): SessionResponse!
  revokeAllSessions: Boolean!
  revokeSession(sessionId: String!): Boolean!
  sendMessage(payload: AddMessageDto!): Boolean!
  updateApiKey(id: String!, payload: UpdateApiKeyDto!): ApiKey!
  updatePassword(payload: ChangePasswordDTO!): User!
}

type Query {
  getApiKeys: [ApiKey!]!
  getChat(query: GetChatDto!): SingleChatResponse!
  getChatBranches(chatId: String!): [ChatBranch!]!
  getChatMessages(query: GetMessagesDto!): MessagesResponse!
  getChats(query: GetManyChatsDto!): ChatsResponse!
  getSessions: [SessionResponse!]!
}

input RegisterDto {
  displayName: String!
  email: String!
  password: String!
}

type SessionResponse {
  accessToken: String!
  rawDecryptKey: String
  refreshToken: String!
  user: User
}

type SingleChatResponse {
  branches: [ChatBranch!]!
  chat: Chat!
  totalMessages: Float!
}

input UpdateApiKeyDto {
  alias: String
  isActive: Boolean
}

type User {
  _id: String!
  createdAt: DateTime!
  decryptKey: String!
  displayName: String!
  email: String!
  emailVerified: Boolean!
  encryptKey: String!
  updatedAt: DateTime!
}