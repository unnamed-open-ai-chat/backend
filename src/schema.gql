# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AIModel {
  author: String!
  capabilities: AIModelCapabilities!
  category: String
  cost: String
  description: String
  enabled: Boolean
  id: String!
  name: String!
  provider: String!
  speed: String
}

type AIModelCapabilities {
  codeExecution: Boolean!
  fileAnalysis: Boolean!
  functionCalling: Boolean!
  imageAnalysis: Boolean!
  imageGeneration: Boolean!
  textGeneration: Boolean!
  webBrowsing: Boolean!
}

enum AIProviderId {
  anthropic
  google
  openai
  openrouter
}

input AddMessageDto {
  apiKeyId: String!
  attachments: [String!]
  branchId: String!
  modelId: String!
  prompt: String!
  rawDecryptKey: String!
  useImageTool: Boolean
}

type ApiKey {
  _id: String!
  alias: String!
  lastRotated: DateTime
  lastUsed: DateTime
  lastValidated: DateTime
  provider: String!
}

input ChangePasswordDto {
  newPassword: String!
  oldPassword: String!
}

type Chat {
  _id: String!
  archived: Boolean!
  defaultBranch: ChatBranch
  isPublic: Boolean!
  lastActivityAt: DateTime!
  pinned: Boolean!
  title: String!
}

type ChatBranch {
  _id: String!
  branchPoint: Float!
  isActive: Boolean!
  messageCount: Float!
  modelConfig: ModelConfig
  name: String!
  parentBranchId: ChatBranch
}

type ChatsResponse {
  chats: [Chat!]!
  hasMore: Boolean!
  total: Float!
}

input CreateApiKeyDto {
  alias: String!
  apiKey: String!
  provider: AIProviderId!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DeviceInfo {
  browser: String
  ip: String!
  platform: String
  userAgent: String!
}

type File {
  _id: String!
  createdAt: DateTime!
  description: String
  filename: String!
  mimetype: String!
  originalName: String!
  size: Float!
  updatedAt: DateTime!
}

input ForkBranchDto {
  cloneMessages: Boolean
  name: String
}

input GetChatDto {
  chatId: String!
}

input GetManyChatsDto {
  archived: Boolean = false
  limit: Float = 20
  offset: Float = 0
  search: String
}

input GetMessagesDto {
  branchId: String!
  fromIndex: Float = 0
  limit: Float = 50
  offset: Float = 0
}

input LoginDto {
  email: String!
  password: String!
}

type Message {
  _id: String!
  attachments: [ID!]!
  branchId: String!
  chatId: String!
  content: [MessageContent!]!
  createdAt: DateTime!
  editedAt: DateTime
  index: Float!
  isEdited: Boolean!
  modelUsed: String
  originalContent: [MessageContent!]
  role: String!
  tokens: Float
}

type MessageContent {
  id: String
  name: String
  text: String
  tool_use_id: String
  type: String!
}

type MessagesResponse {
  hasMore: Boolean!
  messages: [Message!]!
  total: Float!
}

type ModelConfig {
  apiKeyId: String
  maxTokens: Float
  modelId: String
  temperature: Float
}

type Mutation {
  addApiKey(payload: CreateApiKeyDto!): ApiKey!
  createChat: Chat!
  createPreferences: UserPreferences!
  deleteApiKey(id: String!): Boolean!
  deleteFile(id: String!): Boolean!
  forkBranch(originalBranchId: String!, payload: ForkBranchDto!): ChatBranch!
  login(payload: LoginDto!): SessionResponse!
  logout: Boolean!
  refreshToken(refreshToken: String!): SessionResponse!
  register(payload: RegisterDto!): SessionResponse!
  revokeAllSessions: Boolean!
  revokeSession(sessionId: String!): Boolean!
  sendMessage(payload: AddMessageDto!): Message!
  updateApiKey(id: String!, payload: UpdateApiKeyDto!): ApiKey!
  updateBranch(branchId: String!, payload: UpdateBranchDto!): ChatBranch!
  updateChat(id: String!, payload: UpdateChatDto!): Chat!
  updateFile(id: String!, updateFileDto: UpdateFileDto!): File!
  updatePassword(payload: ChangePasswordDto!): User!
  updatePreferences(payload: UpdatePreferencesDto!): UserPreferences!
  updateUser(payload: UpdateUserDto!): User!
}

type Query {
  getApiKeys: [ApiKey!]!
  getAvailableModels(rawDecryptKey: String!): [AIModel!]!
  getChat(query: GetChatDto!): SingleChatResponse!
  getChatBranches(chatId: String!): [ChatBranch!]!
  getChatMessages(query: GetMessagesDto!): MessagesResponse!
  getChats(query: GetManyChatsDto!): ChatsResponse!
  getFileById(id: String!): File!
  getPreferences: UserPreferences!
  getSessions: [Session!]!
  getUser: User!
  getUserFiles: [File!]!
  getUserStorageStats: UserStorageStats!
}

input RegisterDto {
  displayName: String!
  email: String!
  password: String!
}

type Session {
  _id: String!
  deviceInfo: DeviceInfo!
  expiresAt: DateTime!
  isActive: Boolean!
  lastUsedAt: DateTime!
}

type SessionResponse {
  accessToken: String!
  rawDecryptKey: String
  refreshToken: String!
  user: User
}

type SingleChatResponse {
  branches: [ChatBranch!]!
  chat: Chat!
  totalMessages: Float!
}

input UpdateApiKeyDto {
  alias: String
  isActive: Boolean
}

input UpdateBranchDto {
  modelConfig: UpdateBranchModelConfigDto
  name: String
}

input UpdateBranchModelConfigDto {
  apiKeyId: String
  maxTokens: Float
  modelId: String
  temperature: Float
}

input UpdateChatDto {
  archived: Boolean
  isPublic: Boolean
  pinned: Boolean
  title: String
}

input UpdateFileDto {
  description: String
  originalName: String
}

input UpdatePreferencesDto {
  dateFormat: String
  language: String
  showSidebar: Boolean
  showTimestamps: Boolean
  theme: String
  use24HourFormat: Boolean
}

input UpdateUserDto {
  displayName: String
  email: String
}

type User {
  _id: String!
  createdAt: DateTime!
  decryptKey: String!
  displayName: String!
  email: String!
  emailVerified: Boolean!
  encryptKey: String!
  preferences: UserPreferences
  updatedAt: DateTime!
}

type UserPreferences {
  _id: String!
  dateFormat: String
  language: String
  showSidebar: Boolean
  showTimestamps: Boolean
  theme: String
  use24HourFormat: Boolean
}

type UserStorageStats {
  limit: Float!
  remaining: Float!
  used: Float!
}